stage width, height
frame width, height
camera left, top, width, height: Changes whenever we zoom or scroll.  This is also the clipping area of the background that we blit characters and stuff onto.
	left=max(left, 0), left=min(left, stage.width-camera.width)
	width=min(width, stage.width), height=min(height, stage.height)
Initialize: frame is always the same, stage is based on rows and columns, camera is the same as the frame except left=grid_tilt.  Zoom is 0.
Render: Make a copy of the static background, set its clipping area to the camera.  Blit the animated background, set the clipping area to the modified rect and blit the static foreground, then set the clipping area back to the camera and blit characters and effects.  If stage wider than frame (this should always be the case), smoothscale the camera to the frame's size.
Zoom out: Check if camera width is the same as stage width.  If it is, do nothing.  If it isn't, zoom -= 0.25, then set the camera width to min(stage.width, int(frame width/zoom)).  Move camera rect by R% of the difference between new camera width and old camera width, where R is based on event.pos/ frame.width
Zoom in: Check if camera width is the same as frame width.  If it is, do nothing.  If it isn't, zoom += 0.25 then set the camera width to max(frame.width, int(frame width/zoom)).  Move camera rect by R% of the difference between new camera width and old camera width, where R is based on event.pos/frame.width
Scroll: Get event.rel, then move camera rect by rel*camera/frame

1. On init, blit and load every stage element into one image for each frame, because we need to do that before scaling.  Accept a number, either number of grids or number of pixels, to know how long to generate the stage, so we don't generate a longer stage than we need
3. Get a camera-scaled stage as a new Surface
4. Get another new Surface with flag=pygame.SRCALPHA
5. Put gridlines, characters, and effects onto a blank, camera-clipped canvas

if we're shrinking, we want to shrink before blit
if we're clipping, we want to clip before blit

We want to shrink, THEN clip

1. On init, load, blit, and save every stationary stage element into one image, taking a number from the Field object to know how long to generate the stage, in order not to generate a stage whose space we can never use
1a. Do animated stage elements later.  They change everything, and it depends on how many I really want to use.
2. Get a camera-scaled copy of the stage
3. Set the clipping area of that stage based on camera
4. Blit a camera-scaled copy of gridlines onto clipped, camera-scaled stage.  This is the background.
5. Blit a camera-scaled copy of characters/effects onto clipped, camera-scaled stage
6. Blit the clipping area from the camera-scaled stage with all the stuff on it onto self.image
7. Profit!


static stage elements, animated stage elements
things that are flat on the floor
grid lines
sort by row, then anchor point, a variable that determines where the object is sticking out of the ground
foreground effects, like fog that's closer than the closest row